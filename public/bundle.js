/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/main.js":
/*!************************!*\
  !*** ./public/main.js ***!
  \************************/
/***/ (() => {

eval("// Utility function to fetch data from the server\nconst baseUrl = 'http://localhost:3000/api'; // Add /api to base URL\n\nconst fetchData = async url => {\n  try {\n    const response = await fetch(`${baseUrl}${url}`);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || `Error: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('Fetched data:', data); // Debug log\n    return data;\n  } catch (error) {\n    console.error('Fetch error:', error);\n    alert('Failed to fetch data: ' + error.message);\n    throw error;\n  }\n};\n// Add formatting helper function\nconst formatCurrency = amount => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  }).format(amount);\n};\n\n// Utility function to populate tables\n\nconst populateTable = (tableId, data, columns) => {\n  const tableBody = document.querySelector(`#${tableId} tbody`);\n  tableBody.innerHTML = '';\n  data.forEach(item => {\n    const row = document.createElement('tr');\n    columns.forEach(col => {\n      const cell = document.createElement('td');\n      let value = item[col];\n\n      // Format currency values\n      if (col.includes('Price') || col.includes('Revenue') || col.includes('Tips')) {\n        value = formatCurrency(value);\n      }\n      // Format decimal values\n      else if (typeof value === 'number' && !Number.isInteger(value)) {\n        value = value.toFixed(2);\n      }\n      cell.textContent = value || 'N/A';\n      row.appendChild(cell);\n    });\n    tableBody.appendChild(row);\n  });\n};\n\n// Fetch and display all restaurants\nconst displayAllRestaurants = async () => {\n  const data = await fetchData('/restaurants');\n  if (data) {\n    populateTable('restaurant-details-table', data, ['RESTAURANT_ID', 'R_NAME', 'LOCATION', 'CUISINE']);\n  }\n};\n\n// Fetch and display restaurant by ID\nconst getRestaurantById = async () => {\n  const id = document.querySelector('#restaurant-id').value;\n  if (!id) return alert('Please enter a Restaurant ID.');\n  try {\n    const restaurant = await fetchData(`/restaurants/${id}`);\n    if (restaurant) {\n      // Ensure we're using the correct column names and handle array response\n      populateTable('restaurant-details-table', [restaurant[0]], ['RESTAURANT_ID', 'R_NAME', 'LOCATION', 'CUISINE']);\n    }\n  } catch (error) {\n    console.error('Error fetching restaurant:', error);\n    alert('Failed to fetch restaurant details: ' + error.message);\n  }\n};\n\n// Fetch and display all menu items\nconst displayAllMenuItems = async () => {\n  const menuItems = await fetchData('/menu-items');\n  if (menuItems) {\n    populateTable('menu-items-table', menuItems, ['ITEM_ID', 'ITEM_NAME', 'PRICE', 'RESTAURANT_ID']);\n  }\n};\n\n// Fetch and display menu items by restaurant ID\nconst getMenuItemsByRestaurant = async () => {\n  const id = document.querySelector('#menu-restaurant-id').value;\n  if (!id) return alert('Please enter a Restaurant ID.');\n  const menuItems = await fetchData(`/restaurants/${id}/menu-items`);\n  if (menuItems) {\n    populateTable('menu-items-table', menuItems, ['ITEM_ID', 'ITEM_NAME', 'PRICE', 'RESTAURANT_ID']);\n  }\n};\n\n// Fetch and display all customers\nconst displayAllCustomers = async () => {\n  const customers = await fetchData('/customers');\n  if (customers) {\n    populateTable('customer-details-table', customers, ['CUSTOMER_ID', 'CUSTOMER_NAME', 'LOYALTY_CARD_ID', 'CONTACT_INFO']);\n  }\n};\n\n// Fetch and display customer by ID\nconst getCustomerById = async () => {\n  const id = document.querySelector('#customer-id').value;\n  if (!id) return alert('Please enter a Customer ID.');\n  try {\n    const customer = await fetchData(`/customers/${id}`);\n    if (customer) {\n      populateTable('customer-details-table', [customer[0]], ['CUSTOMER_ID', 'CUSTOMER_NAME', 'LOYALTY_CARD_ID', 'CONTACT_INFO']);\n    }\n  } catch (error) {\n    console.error('Error fetching customer:', error);\n    alert('Failed to fetch customer details: ' + error.message);\n  }\n};\n\n// Fetch and display all loyalty cards\nconst displayAllLoyaltyCards = async () => {\n  const loyaltyCards = await fetchData('/loyalty-cards');\n  if (loyaltyCards) {\n    populateTable('loyalty-card-table', loyaltyCards, ['LOYALTY_CARD_ID', 'POINTS', 'DISCOUNT_RATE', 'CUSTOMER_ID']);\n  }\n};\n\n// Fetch and display loyalty card by customer ID\nconst getLoyaltyCardByCustomerId = async () => {\n  const id = document.querySelector('#loyalty-customer-id').value;\n  if (!id) return alert('Please enter a Customer ID.');\n  try {\n    const loyaltyCard = await fetchData(`/customers/${id}/loyalty-card`);\n    if (loyaltyCard) {\n      populateTable('loyalty-card-table', [loyaltyCard[0]], ['LOYALTY_CARD_ID', 'POINTS', 'DISCOUNT_RATE', 'CUSTOMER_ID']);\n    }\n  } catch (error) {\n    console.error('Error fetching loyalty card:', error);\n    alert('Failed to fetch loyalty card details: ' + error.message);\n  }\n};\n\n// Fetch and display all orders\n// Updated Orders functions\nconst displayAllOrders = async () => {\n  const orders = await fetchData('/orders');\n  if (orders) {\n    populateTable('orders-table', orders, ['ORDER_ID', 'CUSTOMER_ID', 'TOTAL_AMOUNT', 'TAX', 'TIP']);\n  }\n};\nconst getOrdersByCustomer = async () => {\n  const id = document.querySelector('#order-customer-id').value;\n  if (!id) return alert('Please enter a Customer ID.');\n  const orders = await fetchData(`/customers/${id}/orders`);\n  if (orders) {\n    populateTable('orders-table', orders, ['ORDER_ID', 'CUSTOMER_ID', 'TOTAL_AMOUNT', 'TAX', 'TIP']);\n  }\n};\n\n// Added Display All for Order Items\nconst displayAllOrderItems = async () => {\n  const orderItems = await fetchData('/order-items');\n  if (orderItems) {\n    populateTable('order-items-table', orderItems, ['ORDER_ITEM_ID', 'ORDER_ID', 'ITEM_ID', 'QUANTITY']);\n  }\n};\nconst getOrderItemsByOrderId = async () => {\n  const id = document.querySelector('#order-items-id').value;\n  if (!id) return alert('Please enter an Order ID.');\n  const orderItems = await fetchData(`/orders/${id}/items`);\n  if (orderItems) {\n    populateTable('order-items-table', orderItems, ['ORDER_ITEM_ID', 'ORDER_ID', 'ITEM_ID', 'QUANTITY']);\n  }\n};\n///////////\n// Fetch and display all payments\nconst displayAllPayments = async () => {\n  const payments = await fetchData('/payments');\n  if (payments) {\n    populateTable('payment-details-table', payments, ['PAYMENT_ID', 'ORDER_ID', 'PAYMENT_TYPE', 'PAYMENT_AMOUNT']);\n  }\n};\n\n// Fetch and display payment by order ID\nconst getPaymentByOrderId = async () => {\n  const id = document.querySelector('#payment-order-id').value;\n  if (!id) return alert('Please enter an Order ID.');\n  try {\n    const payment = await fetchData(`/orders/${id}/payment`);\n    if (payment) {\n      populateTable('payment-details-table', payment, ['PAYMENT_ID', 'ORDER_ID', 'PAYMENT_TYPE', 'PAYMENT_AMOUNT']);\n    }\n  } catch (error) {\n    console.error('Error fetching payment:', error);\n    alert('Failed to fetch payment details: ' + error.message);\n  }\n};\n\n/**new changes */\n// Display top restaurants report\nconst displayTopRestaurants = async () => {\n  try {\n    const data = await fetchData('/reports/top-restaurants');\n    if (data) {\n      populateTable('top-restaurants-table', data, ['Restaurant_Name', 'Cuisine_Type', 'Total_Orders', 'Total_Revenue', 'Average_Order_Value', 'Total_Tips', 'Unique_Customers']);\n    }\n  } catch (error) {\n    console.error('Error fetching top restaurants report:', error);\n  }\n};\n\n// Display customer loyalty report\nconst displayCustomerLoyalty = async () => {\n  try {\n    const data = await fetchData('/reports/customer-loyalty');\n    populateTable('customer-loyalty-table', data, ['CUSTOMER_NAME', 'POINTS', 'total_orders', 'total_spent']);\n  } catch (error) {\n    console.error('Error fetching customer loyalty report:', error);\n  }\n};\n\n// Display popular items report\nconst displayPopularItems = async () => {\n  try {\n    const data = await fetchData('/reports/popular-items');\n    if (data) {\n      populateTable('popular-items-table', data, ['Item_Name', 'Restaurant_Name', 'Cuisine_Type', 'Number_of_Orders', 'Total_Quantity_Ordered', 'Unit_Price', 'Total_Revenue', 'Unique_Customers', 'Average_Quantity_Per_Order']);\n    }\n  } catch (error) {\n    console.error('Error fetching popular items report:', error);\n  }\n};\n\n// Display payment analysis report\nconst displayPaymentAnalysis = async () => {\n  try {\n    const data = await fetchData('/reports/payment-analysis');\n    populateTable('payment-analysis-table', data, ['PAYMENT_TYPE', 'number_of_transactions', 'total_amount', 'average_amount']);\n  } catch (error) {\n    console.error('Error fetching payment analysis report:', error);\n  }\n};\n/** */\n\n/*** */\n// CREATE operations\n// Example for Restaurant insert\nasync function addRestaurant(event) {\n  event.preventDefault();\n  const name = document.getElementById('new-restaurant-name').value;\n  const location = document.getElementById('new-restaurant-location').value;\n  const cuisine = document.getElementById('new-restaurant-cuisine').value;\n  try {\n    const response = await fetch(`${baseUrl}/restaurants`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        location: location,\n        cuisine: cuisine\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to add restaurant');\n    }\n    alert('Restaurant added successfully!');\n    displayAllRestaurants();\n    event.target.reset();\n  } catch (error) {\n    console.error('Detailed error:', error);\n    alert('Failed to add restaurant: ' + error.message);\n  }\n}\nasync function addMenuItem(event) {\n  event.preventDefault();\n  const itemName = document.getElementById('new-item-name').value;\n  const price = document.getElementById('new-item-price').value;\n  const restaurantId = document.getElementById('new-item-restaurant-id').value;\n  console.log('Sending data:', {\n    itemName,\n    price,\n    restaurantId\n  }); // Add this line\n\n  try {\n    const response = await fetch(`${baseUrl}/menu-items`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ITEM_NAME: itemName,\n        PRICE: parseFloat(price),\n        RESTAURANT_ID: parseInt(restaurantId)\n      })\n    });\n    const data = await response.json();\n    console.log('Server response:', data); // Add this line\n\n    if (!response.ok) {\n      throw new Error(data.error || data.details || 'Failed to add menu item');\n    }\n    alert('Menu item added successfully!');\n    displayAllMenuItems();\n    event.target.reset();\n  } catch (error) {\n    console.error('Detailed error:', error);\n    alert('Failed to add menu item: ' + error.message);\n  }\n}\n\n// UPDATE operations\nasync function updateRestaurant(event) {\n  event.preventDefault();\n  const id = document.getElementById('update-restaurant-id').value;\n  const name = document.getElementById('update-restaurant-name').value;\n  const location = document.getElementById('update-restaurant-location').value;\n  const cuisine = document.getElementById('update-restaurant-cuisine').value;\n  try {\n    const response = await fetch(`${baseUrl}/restaurants/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        location,\n        cuisine\n      })\n    });\n    if (!response.ok) throw new Error('Failed to update restaurant');\n    alert('Restaurant updated successfully!');\n    displayAllRestaurants();\n    event.target.reset();\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to update restaurant: ' + error.message);\n  }\n}\nasync function updateMenuItem(event) {\n  event.preventDefault();\n  const id = document.getElementById('update-item-id').value;\n  const name = document.getElementById('update-item-name').value;\n  const price = document.getElementById('update-item-price').value;\n  const restaurantId = document.getElementById('update-item-restaurant-id').value;\n  try {\n    const response = await fetch(`${baseUrl}/menu-items/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        price,\n        restaurantId\n      })\n    });\n    if (!response.ok) throw new Error('Failed to update menu item');\n    alert('Menu item updated successfully!');\n    displayAllMenuItems();\n    event.target.reset();\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to update menu item: ' + error.message);\n  }\n}\n\n// DELETE operations\nasync function deleteRestaurant() {\n  const id = document.getElementById('delete-restaurant-id').value;\n  if (!id) {\n    alert('Please enter a Restaurant ID');\n    return;\n  }\n  if (!confirm('Are you sure you want to delete this restaurant?')) return;\n  try {\n    const response = await fetch(`${baseUrl}/restaurants/${id}`, {\n      method: 'DELETE'\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to delete restaurant');\n    }\n    alert('Restaurant deleted successfully!');\n    displayAllRestaurants();\n    document.getElementById('delete-restaurant-id').value = '';\n  } catch (error) {\n    console.error('Delete error:', error);\n    if (error.message.includes('foreign key constraint')) {\n      alert('Cannot delete this restaurant because it has related records (menu items, orders, etc.)');\n    } else {\n      alert('Failed to delete restaurant: ' + error.message);\n    }\n  }\n}\nasync function deleteMenuItem() {\n  const id = document.getElementById('delete-menu-item-id').value;\n  if (!id) {\n    alert('Please enter an Item ID');\n    return;\n  }\n  if (!confirm('Are you sure you want to delete this menu item?')) return;\n  try {\n    const response = await fetch(`${baseUrl}/menu-items/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) throw new Error('Failed to delete menu item');\n    alert('Menu item deleted successfully!');\n    displayAllMenuItems();\n    document.getElementById('delete-menu-item-id').value = '';\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to delete menu item: ' + error.message);\n  }\n}\nasync function addCustomer(event) {\n  event.preventDefault();\n  const name = document.getElementById('new-customer-name').value;\n  const loyaltyCardId = document.getElementById('new-customer-loyalty-id').value;\n  const contactInfo = document.getElementById('new-customer-contact').value;\n  try {\n    const response = await fetch(`${baseUrl}/customers`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        loyaltyCardId,\n        contactInfo\n      })\n    });\n    if (!response.ok) throw new Error('Failed to add customer');\n    const result = await response.json();\n    alert('Customer added successfully!');\n    displayAllCustomers();\n    event.target.reset();\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to add customer: ' + error.message);\n  }\n}\nasync function updateCustomer(event) {\n  event.preventDefault();\n  const id = document.getElementById('update-customer-id').value;\n  const name = document.getElementById('update-customer-name').value;\n  const loyaltyCardId = document.getElementById('update-customer-loyalty-id').value;\n  const contactInfo = document.getElementById('update-customer-contact').value;\n  try {\n    const response = await fetch(`${baseUrl}/customers/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        loyaltyCardId,\n        contactInfo\n      })\n    });\n    if (!response.ok) throw new Error('Failed to update customer');\n    alert('Customer updated successfully!');\n    displayAllCustomers();\n    event.target.reset();\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to update customer: ' + error.message);\n  }\n}\nasync function deleteCustomer() {\n  const id = document.getElementById('delete-customer-id').value;\n  if (!id) {\n    alert('Please enter a Customer ID');\n    return;\n  }\n  if (!confirm('Are you sure you want to delete this customer?')) return;\n  try {\n    const response = await fetch(`${baseUrl}/customers/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) throw new Error('Failed to delete customer');\n    alert('Customer deleted successfully!');\n    displayAllCustomers();\n    document.getElementById('delete-customer-id').value = '';\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to delete customer: ' + error.message);\n  }\n}\n\n// Loyalty Card operations\nasync function addLoyaltyCard(event) {\n  event.preventDefault();\n  const points = document.getElementById('new-loyalty-points').value;\n  const discountRate = document.getElementById('new-loyalty-discount').value;\n  const customerId = document.getElementById('new-loyalty-customer-id').value;\n  try {\n    const response = await fetch(`${baseUrl}/loyalty-cards`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        points,\n        discountRate,\n        customerId\n      })\n    });\n    if (!response.ok) throw new Error('Failed to add loyalty card');\n    const result = await response.json();\n    alert('Loyalty card added successfully!');\n    displayAllLoyaltyCards();\n    event.target.reset();\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to add loyalty card: ' + error.message);\n  }\n}\nasync function updateLoyaltyCard(event) {\n  event.preventDefault();\n  const id = document.getElementById('update-loyalty-id').value;\n  const points = document.getElementById('update-loyalty-points').value;\n  const discountRate = document.getElementById('update-loyalty-discount').value;\n  //const customerId = document.getElementById('new-loyalty-customer-id').value;\n  const customerId = document.getElementById('update-loyalty-customer-id').value;\n  try {\n    const response = await fetch(`${baseUrl}/loyalty-cards/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        points,\n        discountRate,\n        customerId\n      })\n    });\n    if (!response.ok) throw new Error('Failed to update loyalty card');\n    alert('Loyalty card updated successfully!');\n    displayAllLoyaltyCards();\n    event.target.reset();\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to update loyalty card: ' + error.message);\n  }\n}\nasync function deleteLoyaltyCard() {\n  const id = document.getElementById('delete-loyalty-card-id').value;\n  if (!id) {\n    alert('Please enter a Loyalty Card ID');\n    return;\n  }\n  if (!confirm('Are you sure you want to delete this loyalty card?')) return;\n  try {\n    const response = await fetch(`${baseUrl}/loyalty-cards/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) throw new Error('Failed to delete loyalty card');\n    alert('Loyalty card deleted successfully!');\n    displayAllLoyaltyCards();\n    document.getElementById('delete-loyalty-card-id').value = '';\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to delete loyalty card: ' + error.message);\n  }\n}\n\n// Order operations\nasync function addOrder(event) {\n  event.preventDefault();\n  const customerId = document.getElementById('new-order-customer-id').value;\n  const totalAmount = document.getElementById('new-order-total').value;\n  const tax = document.getElementById('new-order-tax').value;\n  const tip = document.getElementById('new-order-tip').value;\n  try {\n    const response = await fetch(`${baseUrl}/orders`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        customerId,\n        totalAmount,\n        tax,\n        tip\n      })\n    });\n    if (!response.ok) throw new Error('Failed to add order');\n    const result = await response.json();\n    alert('Order added successfully!');\n    displayAllOrders();\n    event.target.reset();\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to add order: ' + error.message);\n  }\n}\nasync function updateOrder(event) {\n  event.preventDefault();\n  console.log('Update Order triggered');\n  const id = document.getElementById('update-order-id').value;\n  console.log('Order ID:', id);\n  const customerId = document.getElementById('update-order-customer-id').value;\n  const totalAmount = document.getElementById('update-order-total').value;\n  const tax = document.getElementById('update-order-tax').value;\n  const tip = document.getElementById('update-order-tip').value;\n  try {\n    const response = await fetch(`${baseUrl}/orders/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        customerId,\n        totalAmount,\n        tax,\n        tip\n      })\n    });\n    if (!response.ok) throw new Error('Failed to update order');\n    alert('Order updated successfully!');\n    displayAllOrders();\n    event.target.reset();\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to update order: ' + error.message);\n  }\n}\nasync function deleteOrder() {\n  const id = document.getElementById('delete-order-id').value;\n  if (!id) {\n    alert('Please enter an Order ID');\n    return;\n  }\n  if (!confirm('Are you sure you want to delete this order?')) return;\n  try {\n    const response = await fetch(`${baseUrl}/orders/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) throw new Error('Failed to delete order');\n    alert('Order deleted successfully!');\n    displayAllOrders();\n    document.getElementById('delete-order-id').value = '';\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to delete order: ' + error.message);\n  }\n}\n\n// Order Item operations\nasync function addOrderItem(event) {\n  event.preventDefault();\n  const orderId = document.getElementById('new-order-item-order-id').value;\n  const itemId = document.getElementById('new-order-item-item-id').value;\n  const quantity = document.getElementById('new-order-item-quantity').value;\n  try {\n    const response = await fetch(`${baseUrl}/order-items`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        orderId,\n        itemId,\n        quantity\n      })\n    });\n    if (!response.ok) throw new Error('Failed to add order item');\n    const result = await response.json();\n    alert('Order item added successfully!');\n    displayAllOrderItems();\n    event.target.reset();\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to add order item: ' + error.message);\n  }\n}\nasync function updateOrderItem(event) {\n  event.preventDefault();\n  const id = document.getElementById('update-order-item-id').value;\n  const orderId = document.getElementById('update-order-item-order-id').value;\n  const itemId = document.getElementById('update-order-item-item-id').value;\n  const quantity = document.getElementById('update-order-item-quantity').value;\n  try {\n    const response = await fetch(`${baseUrl}/order-items/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        orderId,\n        itemId,\n        quantity\n      })\n    });\n    if (!response.ok) throw new Error('Failed to update order item');\n    alert('Order item updated successfully!');\n    displayAllOrderItems();\n    event.target.reset();\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to update order item: ' + error.message);\n  }\n}\nasync function deleteOrderItem() {\n  const id = document.getElementById('delete-order-item-id').value;\n  if (!id) {\n    alert('Please enter an Order Item ID');\n    return;\n  }\n  if (!confirm('Are you sure you want to delete this order item?')) return;\n  try {\n    const response = await fetch(`${baseUrl}/order-items/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) throw new Error('Failed to delete order item');\n    alert('Order item deleted successfully!');\n    displayAllOrderItems();\n    document.getElementById('delete-order-item-id').value = '';\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to delete order item: ' + error.message);\n  }\n}\n\n// Payment operations\nasync function addPayment(event) {\n  event.preventDefault();\n  const orderId = document.getElementById('new-payment-order-id').value;\n  const paymentType = document.getElementById('new-payment-type').value;\n  const paymentAmount = document.getElementById('new-payment-amount').value;\n  try {\n    const response = await fetch(`${baseUrl}/payments`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        orderId,\n        paymentType,\n        paymentAmount\n      })\n    });\n    if (!response.ok) throw new Error('Failed to add payment');\n    const result = await response.json();\n    alert('Payment added successfully!');\n    displayAllPayments();\n    event.target.reset();\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to add payment: ' + error.message);\n  }\n}\nasync function updatePayment(event) {\n  event.preventDefault();\n  const id = document.getElementById('update-payment-id').value;\n  const orderId = document.getElementById('update-payment-order-id').value;\n  const paymentType = document.getElementById('update-payment-type').value;\n  const paymentAmount = document.getElementById('update-payment-amount').value;\n  try {\n    const response = await fetch(`${baseUrl}/payments/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        orderId,\n        paymentType,\n        paymentAmount\n      })\n    });\n    if (!response.ok) throw new Error('Failed to update payment');\n    alert('Payment updated successfully!');\n    displayAllPayments();\n    event.target.reset();\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to update payment: ' + error.message);\n  }\n}\nasync function deletePayment() {\n  const id = document.getElementById('delete-payment-id').value;\n  if (!id) {\n    alert('Please enter a Payment ID');\n    return;\n  }\n  if (!confirm('Are you sure you want to delete this payment?')) return;\n  try {\n    const response = await fetch(`${baseUrl}/payments/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) throw new Error('Failed to delete payment');\n    alert('Payment deleted successfully!');\n    displayAllPayments();\n    document.getElementById('delete-payment-id').value = '';\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to delete payment: ' + error.message);\n  }\n}\n\n// Add event listeners when the document loads\ndocument.addEventListener('DOMContentLoaded', () => {\n  document.getElementById('add-restaurant-form').addEventListener('submit', addRestaurant);\n  document.getElementById('update-restaurant-form').addEventListener('submit', updateRestaurant);\n  document.getElementById('add-menu-item-form').addEventListener('submit', addMenuItem);\n  document.getElementById('update-menu-item-form').addEventListener('submit', updateMenuItem);\n  document.getElementById('add-customer-form').addEventListener('submit', addCustomer);\n  document.getElementById('update-customer-form').addEventListener('submit', updateCustomer);\n  document.getElementById('add-loyalty-card-form').addEventListener('submit', addLoyaltyCard);\n  document.getElementById('update-loyalty-card-form').addEventListener('submit', updateLoyaltyCard);\n  document.getElementById('add-order-form').addEventListener('submit', addOrder);\n  document.getElementById('update-order-form').addEventListener('submit', updateOrder);\n  document.getElementById('add-order-item-form').addEventListener('submit', addOrderItem);\n  document.getElementById('update-order-item-form').addEventListener('submit', updateOrderItem);\n  document.getElementById('add-payment-form').addEventListener('submit', addPayment);\n  document.getElementById('update-payment-form').addEventListener('submit', updatePayment);\n});\n/** */\n\n//# sourceURL=webpack://todolist/./public/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./public/main.js"]();
/******/ 	
/******/ })()
;